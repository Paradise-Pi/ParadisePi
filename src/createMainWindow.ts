import { BrowserWindow, session, Menu } from 'electron';
import "reflect-metadata";
import { mainWindowTemplate } from './menuBar';
import path from 'path';
import os from 'os';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; 

export default (): void => {
  const window = new BrowserWindow({
    height: 480,
    width: 800,
    minWidth: 800,
    minHeight: 480,
    fullscreen: (os.platform() == 'linux'),
    title: 'Paradise',
    icon: path.join(__dirname, 'assets/icon/icon.png'),
    webPreferences: {
      nodeIntegration: false, // is default value after Electron v5
      contextIsolation: true, // protect against prototype pollution
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  if (process.platform === 'darwin') {
    // A menu of some kind is required on MacOS
    const menu = Menu.buildFromTemplate(mainWindowTemplate);
    Menu.setApplicationMenu(menu);
  } else {
    Menu.setApplicationMenu(null);
  }

  // and load the index.html of the app.
  window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  window.webContents.openDevTools();
  
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ['default-src \'self\' \'unsafe-eval\' \'unsafe-inline\';']
      }
    });
  });
};
